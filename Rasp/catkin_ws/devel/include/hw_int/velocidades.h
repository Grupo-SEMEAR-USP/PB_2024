// Generated by gencpp from file hw_int/velocidades.msg
// DO NOT EDIT!


#ifndef HW_INT_MESSAGE_VELOCIDADES_H
#define HW_INT_MESSAGE_VELOCIDADES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hw_int
{
template <class ContainerAllocator>
struct velocidades_
{
  typedef velocidades_<ContainerAllocator> Type;

  velocidades_()
    : vel_esq(0.0)
    , vel_dir(0.0)  {
    }
  velocidades_(const ContainerAllocator& _alloc)
    : vel_esq(0.0)
    , vel_dir(0.0)  {
  (void)_alloc;
    }



   typedef double _vel_esq_type;
  _vel_esq_type vel_esq;

   typedef double _vel_dir_type;
  _vel_dir_type vel_dir;





  typedef boost::shared_ptr< ::hw_int::velocidades_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hw_int::velocidades_<ContainerAllocator> const> ConstPtr;

}; // struct velocidades_

typedef ::hw_int::velocidades_<std::allocator<void> > velocidades;

typedef boost::shared_ptr< ::hw_int::velocidades > velocidadesPtr;
typedef boost::shared_ptr< ::hw_int::velocidades const> velocidadesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hw_int::velocidades_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hw_int::velocidades_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hw_int::velocidades_<ContainerAllocator1> & lhs, const ::hw_int::velocidades_<ContainerAllocator2> & rhs)
{
  return lhs.vel_esq == rhs.vel_esq &&
    lhs.vel_dir == rhs.vel_dir;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hw_int::velocidades_<ContainerAllocator1> & lhs, const ::hw_int::velocidades_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hw_int

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hw_int::velocidades_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw_int::velocidades_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw_int::velocidades_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw_int::velocidades_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw_int::velocidades_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw_int::velocidades_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hw_int::velocidades_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5827453567ecbdabddb68554148b9c0e";
  }

  static const char* value(const ::hw_int::velocidades_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5827453567ecbdabULL;
  static const uint64_t static_value2 = 0xddb68554148b9c0eULL;
};

template<class ContainerAllocator>
struct DataType< ::hw_int::velocidades_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hw_int/velocidades";
  }

  static const char* value(const ::hw_int::velocidades_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hw_int::velocidades_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 vel_esq\n"
"float64 vel_dir\n"
;
  }

  static const char* value(const ::hw_int::velocidades_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hw_int::velocidades_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_esq);
      stream.next(m.vel_dir);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct velocidades_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hw_int::velocidades_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hw_int::velocidades_<ContainerAllocator>& v)
  {
    s << indent << "vel_esq: ";
    Printer<double>::stream(s, indent + "  ", v.vel_esq);
    s << indent << "vel_dir: ";
    Printer<double>::stream(s, indent + "  ", v.vel_dir);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HW_INT_MESSAGE_VELOCIDADES_H
